{"version": "https://jsonfeed.org/version/1", "title": "The Ivory Tower", "home_page_url": "https://4zm.org/", "feed_url": "https://4zm.org/feed_json_created.json", "description": "The Ivory Tower is a blog about software engineering and development philosophy by Anders Sundman.", "icon": null, "authors": [], "language": "en", "items": [{"id": "https://4zm.org/2025/05/19/awesome-apis.html", "url": "https://4zm.org/2025/05/19/awesome-apis.html", "title": "Building Awesome APIs", "content_html": "<h1>Building Awesome APIs</h1>\n<p>I've recently delivered two talks on <em>API design best practices for libraries</em>. First at <a href=\"https://accuconference.org/2025/session/awesome-api-design\">ACCU 2025</a> and then again in the <a href=\"https://www.swedencpp.se/\">Stockholm C++ Meetup</a>. It's a fun topic and even if the presentations start out the same way they soon diverge both in style and contents. </p>", "image": null, "date_published": "2025-05-19T00:00:00+00:00", "authors": [], "tags": ["Best Practices", "C++"]}, {"id": "https://4zm.org/2025/04/05/bitter-prediction.html", "url": "https://4zm.org/2025/04/05/bitter-prediction.html", "title": "The Bitter Prediction", "content_html": "<h1>The Bitter Prediction</h1>\n<p>I'm one of many developers experiencing the whirlwind emotional phases of AI's introduction: dismissal, disbelief, excitement, and acceptance. But after working with Claude, Copilot, and Gemini for a while, I have concerns...</p>", "image": null, "date_published": "2025-04-05T00:00:00+00:00", "authors": [], "tags": ["AI", "Philosophy"]}, {"id": "https://4zm.org/2025/03/31/low-level.html", "url": "https://4zm.org/2025/03/31/low-level.html", "title": "Low, Lower, Lowest Level Programming", "content_html": "<h1>Low, Lower, Lowest Level Programming</h1>\n<p>How low can you go? When it comes to embedded programming, the \"full stack\" starts at the PCB. In a recent talk at our local C++ meetup in Stockholm, I explored this in depth. Let's find out what's at the end of the rainbow by diving into topics like memory management, interrupt vector tables and electronics!</p>", "image": null, "date_published": "2025-03-31T00:00:00+00:00", "authors": [], "tags": ["C++", "Embedded"]}, {"id": "https://4zm.org/2024/12/25/a-simple-elf.html", "url": "https://4zm.org/2024/12/25/a-simple-elf.html", "title": "A Simple ELF", "content_html": "<h1>A Simple ELF</h1>\n<p>Let's write a simple program for Linux. How hard can it be? Well, simple is the opposite of complex, not of hard, and it is surprisingly hard to create something simple. What is left when we get rid of the complexity from the standard library, all the modern security features, debugging information, and error handling mechanisms?</p>", "image": null, "date_published": "2024-12-25T00:00:00+00:00", "authors": [], "tags": ["Toolchains"]}, {"id": "https://4zm.org/2024/12/25/elf-shenanigans.html", "url": "https://4zm.org/2024/12/25/elf-shenanigans.html", "title": "ELF Shenanigans - Holiday Special", "content_html": "<h1>ELF Shenanigans - Holiday Special</h1>\n<p>Did you know that it's possible to use ANSI color codes and emojis in the section names of yor ELF binaries? I didn't. So, I had to try, and <code>objdump</code> output has never been prettier. \ud83c\udf84</p>", "image": null, "date_published": "2024-12-25T00:00:00+00:00", "authors": [], "tags": ["Shenanigans", "Toolchains"]}, {"id": "https://4zm.org/2024/12/18/git-beyond-the-basics.html", "url": "https://4zm.org/2024/12/18/git-beyond-the-basics.html", "title": "Git - Beyond the Basics", "content_html": "<h1>Git - Beyond the Basics</h1>\n<p>How well do you know Git? Many of us use it daily and pick up the basics as we go. After a few years, you might start to think that you know Git pretty well. But there are more things in the Git man pages than are dreamt of in your philosophy...</p>", "image": null, "date_published": "2024-12-18T00:00:00+00:00", "authors": [], "tags": ["Beyond the Basics", "Git"]}, {"id": "https://4zm.org/2024/12/02/control-is-an-illusion-anyway.html", "url": "https://4zm.org/2024/12/02/control-is-an-illusion-anyway.html", "title": "Control is an Illusion Anyway...", "content_html": "<h1>Control is an Illusion Anyway...</h1>\n<p>Code review is an indispensable practice in any self-respecting software engineering organization. We get higher quality code and knowledge sharing. It's awesome. But, it\u2019s also <em>not</em> awesome. To be honest, it can be a nightmare. Sometimes we get blocked for days waiting for approval or end up in a never-ending context-switching game of review ping-pong.</p>", "image": null, "date_published": "2024-12-02T00:00:00+00:00", "authors": [], "tags": ["Best Practices", "Code Review", "git"]}, {"id": "https://4zm.org/2024/11/06/steal-this-class.html", "url": "https://4zm.org/2024/11/06/steal-this-class.html", "title": "Steal this Class", "content_html": "<h1>Steal this Class</h1>\n<p>Class design in C++ is hard. Really, really, hard. I love C++ but, sadly, all the defaults are wrong.</p>", "image": null, "date_published": "2024-11-06T00:00:00+00:00", "authors": [], "tags": ["Best Practices", "C++"]}, {"id": "https://4zm.org/2024/11/03/welcome-to-the-jungle.html", "url": "https://4zm.org/2024/11/03/welcome-to-the-jungle.html", "title": "Welcome to the Jungle", "content_html": "<h1>Welcome to the Jungle</h1>\n<p>Your coding conventions, branching strategy, and review guidelines may seem like superficial policy hygiene. But these, along with seemingly random and disconnected activities like fixing a flaky unit test, are connected and can have a profound impact on how your team works with code.</p>", "image": null, "date_published": "2024-11-03T00:00:00+00:00", "authors": [], "tags": ["Leadership", "Philosophy"]}, {"id": "https://4zm.org/2024/10/28/state-of-the-art-python-in-2024.html", "url": "https://4zm.org/2024/10/28/state-of-the-art-python-in-2024.html", "title": "State of the Art Python in 2024", "content_html": "<h1>State of the Art Python in 2024</h1>\n<p>Software development is about making choices. But available options change and so do the tradeoffs. Are you up to date with the best practices for creating a Python application in 2024? Let\u2019s take a look at some great default choices.</p>", "image": null, "date_published": "2024-10-28T00:00:00+00:00", "authors": [], "tags": ["Best Practices", "Python"]}]}